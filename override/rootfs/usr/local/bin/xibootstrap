#!/bin/sh

set -e

argn=
cwd="$(cd "$(dirname "$0")" && pwd)"
defer_cmd=:

debug=
src=host
suite=bullseye
target=disk

main() {
  trap 'eval "$defer_cmd"' EXIT

  eval set -- $(getopt -o s:t: -l debug::,help,source:,suite:,target: -- "$@")

  while [ "$1" != -- ]; do
    case "$1" in
      --debug )
        if [ "$2" -eq 0 ]; then
          debug=0
        else
          debug=1
        fi
        ;;

      --help )
        show_help
        return
        ;;

      --source | -s )
        src="$2"
        shift
        ;;

      --suite )
        suite="$2"
        shift
        ;;

      --target | -t )
        target="$2"
        shift
        ;;
    esac

    shift
  done

  shift

  if [ "$debug" -ne 0 ]; then
    set -x
  fi

  argn="$#"

  if [ "$src" = cwd ] && [ "$target" = dir ]; then
    xi_cwd_dir "$@"
    return
  fi

  if [ "$src" = host ] && [ "$target" = disk ]; then
    xi_host_disk "$@"
    return
  fi

  echo invalid source or target
  return 1
}

setup_dir() {
  if [ "$debug" -ne 0 ]; then
    set -x
  fi

  mkdir -p "$dir"
  cd "$dir"
}

setup_rootfs() {
  if [ "$debug" -ne 0 ]; then
    set -x
  fi

  rm -rf rootfs
  mkdir -p archives

  if [ ! -d root ]; then
    debootstrap --cache-dir="$PWD"/archives "$suite" root
  fi

  cp -R root rootfs
  mount -B /dev rootfs/dev
  defer_cmd="$defer_cmd; umount rootfs/dev"
  mount -B /proc rootfs/proc
  defer_cmd="$defer_cmd; umount rootfs/proc"
  mount -B /sys rootfs/sys
  defer_cmd="$defer_cmd; umount rootfs/sys"
  xargs -a "$cwd"/debian.packages chroot rootfs /usr/bin/env DEBIAN_FRONTEND=noninteractive /usr/bin/apt-get -qqy install
  chroot rootfs /usr/bin/apt-get clean
  rm -rf rootfs/var/lib/apt/lists/*
  cp -RT "$cwd"/override/rootfs rootfs
  chroot rootfs /usr/sbin/useradd -mG sudo -s /bin/bash xi
  echo xi:xi | chroot rootfs /usr/sbin/chpasswd
  chroot rootfs /usr/bin/systemctl enable systemd-networkd.service
  chroot rootfs /usr/lib/systemd/systemd-sysv-install enable sddm
  chroot rootfs /usr/bin/flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
  xargs -a "$cwd"/flatpak.packages chroot rootfs /usr/bin/flatpak install --noninteractive -y
  eval "$defer_cmd"
  defer_cmd=:
}

setup_filesystem_squashfs() {
  if [ "$debug" -ne 0 ]; then
    set -x
  fi

  rm -f filesystem.squashfs
  mksquashfs rootfs filesystem.squashfs -comp zstd
}

setup_efi_img() {
  if [ "$debug" -ne 0 ]; then
    set -x
  fi

  rm -f efi.img
  truncate -s 300M efi.img
  mkfs.fat -F 32 efi.img
}

setup_efi() {
  if [ "$debug" -ne 0 ]; then
    set -x
  fi

  rm -rf efi
  mkdir efi
  mount efi.img efi
  cp -RT "$cwd"/override/efi efi
  mkdir -p efi/EFI/BOOT efi/EFI/systemd
  cp rootfs/initrd.img rootfs/vmlinuz efi
  cp rootfs/usr/lib/systemd/boot/efi/systemd-bootx64.efi efi/EFI/BOOT/BOOTX64.EFI
  cp rootfs/usr/lib/systemd/boot/efi/systemd-bootx64.efi efi/EFI/systemd
  umount efi
}

setup_live() {
  if [ "$debug" -ne 0 ]; then
    set -x
  fi

  rm -rf live
  mkdir live
  cp filesystem.squashfs live
}

setup_iso() {
  if [ "$debug" -ne 0 ]; then
    set -x
  fi

  rm -rf iso
  mkdir iso
  cp -R live iso
  xorriso -as mkisofs -append_partition 2 0xef efi.img -o xi.iso iso
}

show_help() {
  if [ "$debug" -ne 0 ]; then
    set -x
  fi

  cat << '/cat'
Usage:
  xibootstrap [OPTION]... [-t disk] DISK ADMIN
  xibootstrap [OPTION]... -t dir DIRECTORY

Options:
  --debug  enable debug mode
  -s, --source  select SOURCE
  --suite  select SUITE
  -t, --target  select TARGET
  --help  show help

Sources:
  cwd  source from CWD
  host  source from host system

Targets:
  dir  install xi to DIRECTORY
  disk (default)  install xi to DISK
/cat
}

xi_cwd_dir() {
  if [ "$debug" -ne 0 ]; then
    set -x
  fi

  if [ "$(id -u)" -ne 0 ]; then
    exec sudo "$0" --debug="$debug" -s cwd -t dir "$@"
  fi

  if [ "$argn" -lt 1 ]; then
    echo missing argument
    return 1
  fi

  dir="$1"

  setup_dir
  setup_rootfs
  setup_filesystem_squashfs
  setup_efi_img
  setup_efi
  setup_live
  setup_iso
}

xi_host_disk() {
  if [ "$debug" -ne 0 ]; then
    set -x
  fi

  if [ "$(id -u)" -ne 0 ]; then
    exec sudo "$0" "$@"
  fi

  if [ "$argn" -lt 2 ]; then
    echo missing argument
    return 1
  fi

  disk="$1"
  admin="$2"

  sgdisk -Z "$disk" \
    -n 1::+300MiB -c 1:efi -t 1:ef00 \
    -n 2:: -c 2:root -t 2:8304

  # udevadm wait /dev/disk/by-partlabel/efi /dev/disk/by-partlabel/root

  while ! udevadm info /dev/disk/by-partlabel/efi > /dev/null 2>&1 \
    && ! udevadm info /dev/disk/by-partlabel/root > /dev/null 2>&1; do
    sleep .1
  done

  (
    mkfs.btrfs -f /dev/disk/by-partlabel/root
    mount /dev/disk/by-partlabel/root /mnt
    btrfs subvolume create /mnt/@xi &
    btrfs subvolume create /mnt/@xi_boot &
    btrfs subvolume create /mnt/@xi_home &
    btrfs subvolume create /mnt/@xi_opt &
    btrfs subvolume create /mnt/@xi_root &
    btrfs subvolume create /mnt/@xi_var &
    btrfs subvolume create /mnt/@data &
    btrfs subvolume create /mnt/@snapshots &
    wait
    umount /mnt
    mount -o subvol=@xi /dev/disk/by-partlabel/root /mnt

    {
      mkdir /mnt/boot
      mount -o subvol=@xi_boot /dev/disk/by-partlabel/root /mnt/boot
    } &

    (
      mkdir /mnt/home
      mount -o subvol=@xi_home /dev/disk/by-partlabel/root /mnt/home

      {
        mkdir /mnt/home/data
        mount -o subvol=@data /dev/disk/by-partlabel/root /mnt/home/data
        chown 65534:65534 /mnt/home/data &
        chmod 2777 /mnt/home/data &
        wait
      } &

      {
        mkdir /mnt/home/snapshots
        mount -o subvol=@snapshots /dev/disk/by-partlabel/root /mnt/home/snapshots
      } &

      wait
    ) &

    {
      mkdir /mnt/opt
      mount -o subvol=@xi_opt /dev/disk/by-partlabel/root /mnt/opt
    } &

    {
      mkdir /mnt/root
      mount -o subvol=@xi_root /dev/disk/by-partlabel/root /mnt/root
    } &

    {
      mkdir /mnt/var
      mount -o subvol=@xi_var /dev/disk/by-partlabel/root /mnt/var
    } &

    {
      mkdir /mnt/data
      mount -o subvol=@data /dev/disk/by-partlabel/root /mnt/data
    } &

    wait
  ) &

  mkfs.fat -F 32 /dev/disk/by-partlabel/efi &
  wait
  mkdir /mnt/boot/efi
  mount /dev/disk/by-partlabel/efi /mnt/boot/efi

  {
    cp -Tax / /mnt
    cp -Ta /usr/local/share/xi/override/rootfs /mnt
  } &

  cp -RT /usr/local/share/xi/override/efi /mnt/boot/efi &
  wait
  cp --preserve=all /mnt/initrd.img /mnt/vmlinuz /mnt/boot/efi &

  (
    chroot /mnt /usr/sbin/usermod -d /home/"$admin" -l "$admin" xi

    {
      mkdir -m 750 /mnt/home/"$admin"
      cp -RT /mnt/etc/skel /mnt/home/"$admin"
      chroot /mnt /usr/bin/chown -R "$admin":"$admin" /home/"$admin"
    } &

    echo "$admin":"$admin" | chroot /mnt /usr/sbin/chpasswd &
    wait
  ) &

  chroot /mnt /usr/sbin/groupmod -n "$admin" xi &
  rm -rf /mnt/etc/sddm.conf.d/autologin.conf /mnt/etc/sudoers.d/xi /mnt/home/xi /mnt/usr/local/bin/xibootstrap &

  (
    mount -B /dev /mnt/dev &

    {
      mount -B /sys /mnt/sys
      mount -B /sys/firmware/efi/efivars /mnt/sys/firmware/efi/efivars
    } &

    wait
    chroot /mnt /usr/bin/bootctl install
  ) &

  wait
  umount -R /mnt
}

main "$@"
